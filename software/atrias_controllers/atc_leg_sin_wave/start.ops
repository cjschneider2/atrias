## Setup
require("scripting")
require("print")
import("rtt_rospack")

# Clean up the controller namespace
atrias_cm.resetControllerNames()

# Function for setting up subcontrollers
scripting.runScript(rospack.find("ac_orocos_functions") + "/ascFunctions.ops")

## Run
# Import and load the component
import("atc_leg_sin_wave")
loadComponent("controller", "ATCLegSinWave")

# Connect RTOps with this controller (so they can see each other's operations)
connectPeers("atrias_rt", "controller")

# Import and start the subcontrollers
ascKickStart("controller", "asc_coordinate_transforms", "legToMotorTransforms")

controller.pd0Name = ascKickStart("controller", "asc_pd", "ASCPD")
controller.pd1Name = ascKickStart("controller", "asc_pd", "ASCPD")
controller.pd2Name = ascKickStart("controller", "asc_pd", "ASCPD")
controller.pd3Name = ascKickStart("controller", "asc_pd", "ASCPD")
controller.pd4Name = ascKickStart("controller", "asc_pd", "ASCPD")
controller.pd5Name = ascKickStart("controller", "asc_pd", "ASCPD")

controller.sin0Name = ascKickStart("controller", "asc_path_generator", "ASCSinPathGenerator")
controller.sin1Name = ascKickStart("controller", "asc_path_generator", "ASCSinPathGenerator")
controller.sin2Name = ascKickStart("controller", "asc_path_generator", "ASCSinPathGenerator")
controller.sin3Name = ascKickStart("controller", "asc_path_generator", "ASCSinPathGenerator")
controller.sin4Name = ascKickStart("controller", "asc_path_generator", "ASCSinPathGenerator")
controller.sin5Name = ascKickStart("controller", "asc_path_generator", "ASCSinPathGenerator")

# Set up the gui connection
var ConnPolicy gui_policy
gui_policy.transport = 3
gui_policy.name_id = "/atc_leg_sin_wave_input"
stream("controller.gui_data_in", gui_policy)

# Configure components and subcomponents
controller.configure()
# Start components and subcomponents
controller.start()
