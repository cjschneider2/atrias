# Kickstart function for atrias subcontrollers
require("scripting")
require("print")
import("rtt_rospack")

export void dummyFunction( ) {
    return
}

export string ascKickStart( string atcInstance, string ascPackage, string ascComponent ) {
    # Hack to make function calling work
    dummyFunction()

    # Set up the subcontroller environment
    var string ascInstance = atrias_cm.getUniqueName(atcInstance, ascComponent)

    # Import the component
    import(ascPackage)

    # Load the component
    if ( loadComponent(ascInstance, ascComponent) ) then {
        print.ln(ascComponent + " loaded")
    } else {
        # If it fails to load the component, try it as a plugin
        print.ln(ascComponent + " failed to load as a component.  Trying to load as a service plugin.")
        require(ascComponent)
        loadService(atcInstance, ascComponent)
        # Return even though this variable is unused
        return ascInstance
    }

    # Run start.ops if it exists
    if ( scripting.runScript(rospack.find(ascPackage) + "/start.ops") ) then
        # setup the subcontroller's subcontrollers
        scripting.eval(ascComponent + "Subcontrollers(\"" + ascInstance + "\")")
    else
        print.ln("This error indicates that there are no subcontrollers for " + ascPackage)

    # Configure and start the component
    scripting.eval(ascInstance + ".configure()")
    scripting.eval(ascInstance + ".start()")

    # Connect this controller with its subcontroller
    addPeer(atcInstance, ascInstance)

    # Return the subcontroller instance name
    return ascInstance
}
