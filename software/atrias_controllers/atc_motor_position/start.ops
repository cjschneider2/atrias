# For loading subcontroller scripts
require("scripting")
require("print")
import("rtt_rospack")

# Set up the top controller
import("atc_motor_position")
loadComponent("controller", "ATCMotorPosition")
setActivity("controller", 0, HighestPriority, ORO_SCHED_RT)

# Connect RTOps with this controller (so they can see each other's operations)
connectPeers("atrias_rt", "controller")

# Set up subcontrollers.
import("asc_pd")
var string pd0Name = atrias_cm.getUniqueName("controller", "pd")
var string pd1Name = atrias_cm.getUniqueName("controller", "pd")
var string pd2Name = atrias_cm.getUniqueName("controller", "pd")
var string pd3Name = atrias_cm.getUniqueName("controller", "pd")
var string init0Name = atrias_cm.getUniqueName("controller", "init")
loadComponent(pd0Name, "ASCPD")
loadComponent(pd1Name, "ASCPD")
loadComponent(pd2Name, "ASCPD")
loadComponent(pd3Name, "ASCPD")

var string init0Script = rospack.find("asc_biped_boom_init") + "/start.ops"
import("asc_biped_boom_init")
#scripting.loadPrograms(init0Script)
scripting.eval(init0Script)
asc_biped_boom_init_start( init0Name )

# Connect this controller with its subcontrollers.
addPeer("controller", pd0Name)
addPeer("controller", pd1Name)
addPeer("controller", pd2Name)
addPeer("controller", pd3Name)
addPeer("controller", init0Name)
# Pass the names of the subcontrollers to the controller
controller.pd0Name = pd0Name
controller.pd1Name = pd1Name
controller.pd2Name = pd2Name
controller.pd3Name = pd3Name
controller.init0Name = init0Name

# Set up the gui connection
var ConnPolicy gui_policy
gui_policy.transport = 3
gui_policy.name_id = "/atc_motor_position_status"

stream("controller.gui_data_out", gui_policy)

gui_policy.name_id = "/atc_motor_position_input"
stream("controller.gui_data_in", gui_policy)

# Configure components and subcomponents
controller.configure()

# Start components and subcomponents
controller.start()
